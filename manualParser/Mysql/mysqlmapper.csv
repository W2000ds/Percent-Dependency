max_heap_table_size,"1. 该变量设置用户创建的MEMORY表允许增长的最大大小。该变量的值用于计算MEMORY表的MAX_ROWS值。块大小为1024。在存储系统变量的值之前，MySQL服务器将不是块大小的精确倍数的值四舍五入到块大小的下一个较小的倍数。解析器允许平台的最大无符号整数值(32位系统为4294967295或232\xe2\x88\x921, 64位系统为18446744073709551615或264\xe2\x88\x921)，但实际最大值比块大小低。设置这个变量对任何现有的MEMORY没有影响，除非用CREATE TABLE这样的语句重新创建这个表，或者用ALTER TABLE或TRUNCATE TABLE修改这个表。服务器重启还将现有MEMORY表的最大大小设置为全局max_heap_table_size值。这个变量还与tmp_table_size一起使用，以限制内部内存表的大小。参见\xc2\xa08.4.4节，\xe2\x80\ x9c在MySQL中的内部临时表使用\xe2\x80\x9d。Max_heap_table_size没有被复制。有关更多信息，请参阅\xc2\xa017.5.1.21节，\xe2\x80\ x9复制和MEMORY表\xe2\x80\x9d，以及\xc2\xa017.5.1.39节，\xe2\x80\ x9复制和变量\xe2\x80\x9d。”",max_heap_table_size,buffer
tmp_table_size,2. 定义由MEMORY引擎和TempTable存储引擎(从MySQL 8.0.28开始)创建的内部内存临时表的最大大小。如果一个内部内存临时表超过了这个大小，它会自动转换为磁盘上的内部临时表。tmp_table_size变量不适用于用户创建的MEMORY表。不支持用户创建TempTable表。当对内部内存临时表使用MEMORY存储引擎时，实际大小限制是tmp_table_size和max_heap_table_size中较小的一个。max_heap_table_size设置不适用于TempTable表。如果您执行许多高级GROUP BY查询并且您有大量内存，则增加tmp_table_size的值(在对内部内存临时表使用MEMORY存储引擎时，如果需要，还可以增加max_heap_table_size)。你可以通过比较Created_tmp_disk_tables和Created_tmp_tables的值来比较创建的内部暂存表的数量和创建的内部暂存表的总数。另请参阅\xc2\xa08.4.4， \xe2\x80\x9c在MySQL中的内部临时表使用\xe2\x80\x9d。”,tmp_table_size,buffer
end_markers_in_json,3. 优化器JSON输出是否应该添加结束标记。参见MySQL内部:end_markers_in_json系统变量。”,end_markers_in_json,error
windowing_use_high_precision,4. 是否在不损失精度的情况下计算窗口操作。参见\xc2\xa08.2.1.21节，\xe2\x80\x9cWindow Function Optimization\xe2\x80\x9d。”,windowing_use_high_precision,0
optimizer_switch,5. Batched_key_access ={开、关}block_nested_loop={开、关}condition_fanout_filter={开、关}derived_condition_pushdown={开、关}duplicateweedout={开、关}engine_condition_pushdown={开、关}firstmatch={开、关}hash_join={开、关}index_condition_pushdown={开、关}index_merge_intersection={开、关}index_merge_sort_union={开、关}index_merge_union={开、关}index_merge_union={开、关}mrr={开、关}mrr_cost_based={开、关}prefer_ordering_index={on|off} semijoin={on|off} skip_scan={on|off} subquery_materialization_cost_based={on|off} subquery_to_derived={on|off} use_index_extensions={on|off} use_invisible_indexes={on|off} optimizer_switch系统变量启用对优化器行为的控制。该变量的值是一组标志，每个标志都有一个on或off的值，以指示相应的优化器行为是启用还是禁用。这个变量有全局值和会话值，可以在运行时修改。全局默认值可以在服务器启动时设置。要查看当前优化器标志集，请选择变量值:有关此变量的语法及其控制的优化器行为的更多信息，请参见\xc2\xa08.9.2， \xe2\x80\x9cSwitchable Optimizations\xe2\x80\x9d节。”,optimizer_switch,memory
optimizer_trace,6. 这个变量控制优化器跟踪。详细信息请参见MySQL内部:跟踪优化器。”,optimizer_trace,error
optimizer_trace_features,7. 此变量启用或禁用选定的优化器跟踪功能。详细信息请参见MySQL内部:跟踪优化器。”,optimizer_trace_features,error
optimizer_trace_offset,8. 优化器跟踪显示的偏移量。详细信息请参见MySQL内部:跟踪优化器。”,optimizer_trace_offset,error
optimizer_trace_limit,9. 要显示的优化器跟踪的最大数量。详细信息请参见MySQL内部:跟踪优化器。”,optimizer_trace_limit,error
optimizer_trace_max_mem_size,10. 存储的优化器跟踪的最大累积大小。详细信息请参见MySQL内部:跟踪优化器。”,optimizer_trace_max_mem_size,error
sql_mode,11. ALLOW_INVALID_DATES ANSI_QUOTES ERROR_FOR_DIVISION_BY_ZERO HIGH_NOT_PRECEDENCE IGNORE_SPACE NO_AUTO_VALUE_ON_ZERO NO_BACKSLASH_ESCAPES NO_DIR_IN_CREATE NO_ENGINE_SUBSTITUTION NO_UNSIGNED_SUBTRACTION NO_ZERO_DATE NO_ZERO_IN_DATE ONLY_FULL_GROUP_BY PAD_CHAR_TO_FULL_LENGTH PIPES_AS_CONCAT REAL_AS_FLOAT STRICT_ALL_TABLES STRICT_TRANS_TABLES TIME_TRUNCATE_FRACTIONAL当前服务器SQL模式，可以动态设置。详细信息请参见\xc2\xa05.1.11、\xe2\x80\x9cServer SQL模式\xe2\x80\x9d节。MySQL安装程序可能会在安装过程中配置SQL模式。如果SQL模式与默认值或您期望的不同，请检查服务器在启动时读取的选项文件中的设置。”,sql_mode,memory network loop 
autocommit,"12. 自动提交模式。如果设置为1，对表的所有修改立即生效。如果设置为0，则必须使用COMMIT来接受事务，或使用ROLLBACK来取消事务。如果autocommit是0，你把它改为1,MySQL对任何打开的事务执行自动COMMIT。另一种开始事务的方法是使用START TRANSACTION或begin语句。参见\xc2\xa013.3.1节，\xe2\x80\x9cSTART TRANSACTION、COMMIT和ROLLBACK语句\xe2\x80\x9d。默认情况下，客户端连接开始时autocommit设置为1。要使客户端以默认值0开始，请通过使用autocommit=0选项启动服务器来设置全局自动提交值。要使用选项文件设置变量，包括以下几行:",option_bits,
sql_select_limit,13. 从SELECT语句返回的最大行数。有关详细信息，请参见使用SafeUpdates模式(SafeUpdates)。新连接的默认值是服务器允许每个表的最大行数。典型的默认值是(232)\xe2\x88\x921或(264)\xe2\x88\x921。如果更改了限制，可以通过分配DEFAULT值来恢复默认值。如果SELECT具有LIMIT子句，则LIMIT优先于sql_select_limit的值。”,select_limit,
max_join_size,14. 从MySQL 8.0.31开始，这表示对连接在基表中进行的最大行访问数的限制。如果服务器的估计表明必须从基表中读取的行数大于max_join_size，则该语句将被拒绝并出现错误。MySQL 8.0.30及更早版本:不允许语句可能需要检查超过max_join_size的行(对于单表语句)或行组合(对于多表语句)，或者可能执行超过max_join_size的磁盘查找。通过设置这个值，你可以捕获那些没有正确使用键的语句，这可能会花费很长时间。如果你的用户倾向于执行没有WHERE子句的连接，需要很长时间，或者返回数百万行，那么设置它。有关详细信息，请参见使用SafeUpdates模式(SafeUpdates)。无论MySQL发布版本如何，将此变量设置为DEFAULT以外的值都会将sql_big_selects的值重置为0。如果你再次设置sql_big_selects值，max_join_size变量将被忽略。”,max_join_size,
bulk_insert_buffer_size,15. MyISAM使用一种特殊的树状缓存来加快INSERT的批量插入速度。SELECT，INSERT…值(…)，(…)，…，以及在向非空表添加数据时LOAD DATA。这个变量以每个线程的字节数限制缓存树的大小。将其设置为0将禁用此优化。默认值为8MB。从MySQL 8.0.14开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限的会话变量。参见\xc2\xa05.1.9.1节，\xe2\x80\x9cSystem Variable Privileges\xe2\x80\x9d。”,bulk_insert_buff_size,
eq_range_index_dive_limit,16. 此变量表示在相等比较条件下，优化器在估计符合条件的行数时应从使用索引潜水切换到使用索引统计信息时相等范围的数量。它适用于具有这些等效形式之一的表达式的求值，其中优化器使用非唯一索引来查找col_name值:在这两种情况下，表达式都包含N个相等范围。优化器可以使用索引潜水或索引统计进行行估计。如果eq_range_index_dive_limit大于0，如果存在eq_range_index_dive_limit或更多相等范围，优化器将使用现有的索引统计数据而不是索引潜水。因此，要允许对最多N个相等范围使用索引潜水，请将eq_range_index_dive_limit设置为N + 1。要禁用索引统计并始终使用索引潜水而不管N，请将eq_range_index_dive_limit设置为0。有关更多信息，请参阅多值比较的相等范围优化。要更新表索引统计信息以获得最佳估计，请使用ANALYZE table。”,eq_range_index_dive_limit,
cte_max_recursion_depth,17. 公共表表达式(CTE)最大递归深度。如果递归的级别超过该变量的值，服务器将终止任何CTE的执行。有关更多信息，请参见限制通用表表达式递归。”,cte_max_recursion_depth,
histogram_generation_max_mem_size,18. 生成直方图统计数据可用的最大内存量。参见\xc2\xa08.9.6节，\xe2\x80\x9cOptimizer统计信息\xe2\x80\x9d，和\xc2\xa013.7.3.1节，\xe2\x80\x9cANALYZE TABLE语句\xe2\x80\x9d。设置此系统变量的会话值是受限制的操作。会话用户必须有足够的权限来设置受限制的会话变量。参见\xc2\xa05.1.9.1节，\xe2\x80\x9cSystem Variable Privileges\xe2\x80\x9d。”,histogram_generation_max_mem_size,
join_buffer_size,"19. 用于普通索引扫描、范围索引扫描和不使用索引并因此执行全表扫描的连接的最小缓冲区大小。在MySQL 8.0.18及更高版本中，这个变量还控制用于哈希连接的内存量。通常，获得快速连接的最好方法是添加索引。当不能添加索引时，增加join_buffer_size的值可以获得更快的全连接。两个表之间的每个全连接分配一个连接缓冲区。对于不使用索引的多个表之间的复杂连接，可能需要多个连接缓冲区。默认值为256KB。join_buffer_size的最大允许设置为4GB\xe2\x88\x921。64位平台允许更大的值(64位Windows除外，对于64位Windows，较大的值被截断为4GB\xe2\x88\x921并发出警告)。块大小为128，如果值不是块大小的精确倍数，则MySQL服务器在存储系统变量的值之前将其舍入到块大小的下一个倍数。解析器允许的值最高为平台的最大无符号整数值(32位系统为4294967295或232\xe2\x88\x921, 64位系统为18446744073709551615或264\xe2\x88\x921)，但实际最大值比块大小低。除非使用块NestedLoop或批处理键访问算法，否则将缓冲区设置为大于保存每个匹配行所需的值不会有任何好处，并且所有连接至少分配最小大小，因此在全局将该变量设置为较大值时要小心。最好保持全局设置较小，并仅在进行大型连接的会话中将会话设置更改为较大的值，或者通过使用SET_VAR优化器提示(参见\xc2\xa08.9.3， \xe2\x80\x9cOptimizer提示\xe2\x80\x9d节)在perquery的基础上更改设置。如果全局大小大于大多数使用它的查询所需的大小，则内存分配时间可能会导致实质性的性能下降。当使用块NestedLoop时，更大的连接缓冲区可能是有益的，直到第一个表中所有行的所有必需列都存储在连接缓冲区中。这取决于查询;最优大小可能小于保存第一个表的所有行。当使用批处理键访问时，join_buffer_size的值定义了对存储引擎的每个请求中的批处理键的大小。缓冲区越大，对连接操作的右表进行的顺序访问就越多，这样可以显著提高性能。有关连接缓冲的其他信息，请参见\xc2\xa08.2.1.7节，\xe2\x80\x9cNestedLoop join Algorithms\xe2\x80\x9d。有关批处理键访问的信息，请参见\xc2\xa08.2.1.12、\xe2\x80\x9cBlock NestedLoop和批处理键访问连接\xe2\x80\x9d节。有关散列连接的信息，请参见\xc2\xa08.2.1.4节，\xe2\x80\x9cHash连接优化\xe2\x80\x9d。”",join_buff_size,
lock_wait_timeout,20. 此变量指定尝试获取元数据锁的超时时间(以秒为单位)。允许的取值范围是1 ~ 31536000(1年)。默认值为31536000。此超时适用于所有使用元数据锁的语句。这些包括对表、视图、存储过程和存储函数的DML和DDL操作，以及LOCK TABLES、FLUSH TABLES WITH READ LOCK和HANDLER语句。此超时不适用于对mysql数据库中系统表的隐式访问，例如由grant或REVOKE语句或表日志语句修改的grant表。这个超时适用于直接访问的系统表，比如SELECT或UPDATE。超时值分别应用于每个元数据锁尝试。给定的语句可能需要多个锁，因此在报告超时错误之前，语句阻塞的时间可能超过lock_wait_timeout值。当锁定超时时，报告ER_LOCK_WAIT_TIMEOUT。lock_wait_timeout还定义了LOCK INSTANCE FOR BACKUP语句在放弃之前等待锁的时间。”,lock_wait_timeout,
max_allowed_packet,21. 一个数据包或任何生成/中间字符串的最大大小，或mysql_stmt_send_long_data() C API函数发送的任何参数的最大大小。默认为64MB。包消息缓冲区初始化为net_buffer_length字节，但在需要时可以增加到max_allowed_packet字节。这个值默认很小，用来捕获大的(可能不正确的)数据包。如果使用大型BLOB列或长字符串，则必须增加此值。它应该和您想要使用的最大BLOB一样大。max_allowed_packet的协议限制为1GB。该值应该是1024的倍数;非倍数四舍五入到最接近的倍数。当你通过改变max_allowed_packet变量的值来改变消息缓冲区大小时，如果你的客户端程序允许的话，你也应该改变客户端的缓冲区大小。客户端库内置的默认max_allowed_packet值是1GB，但是各个客户端程序可能会覆盖这个值。例如，mysql和mysqldump的默认值分别为16MB和24MB。它们还允许您通过在命令行或选项文件中设置max_allowed_packet来更改客户端值。这个变量的会话值是只读的。客户端最多可以接收与会话值相同的字节数。但是，服务器不会向客户端发送超过当前全局max_allowed_packet值的字节数。(如果在客户端连接后改变了全局值，则全局值可能小于会话值。)”,max_allowed_packet,
max_error_count,22. SHOW ERRORS和SHOW WARNINGS语句要存储的用于显示的错误、警告和信息消息的最大数量。这与诊断区域中条件区域的数量相同，因此也是GET诊断可以检查的条件数量。从MySQL 8.0.27开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限制的会话变量。参见\xc2\xa05.1.9.1， \xe2\x80\x9c系统变量权限\xe2\x80\x9d。”,max_error_count,
max_length_for_sort_data,23. 这个变量在MySQL 8.0.20版本中已弃用，因为优化器的更改使它过时并且没有效果。以前，它作为索引值大小的截止值，决定使用哪种文件排序算法。参见\xc2\xa08.2.1.16节，\xe2\x80\x9cORDER BY Optimization\xe2\x80\x9d。”,max_length_for_sort_data,
max_points_in_geometry,24. ST_Buffer_Strategy()函数的points_per_circle参数的最大值。”,max_points_in_geometry,
max_sort_length,"25. 对使用PAD SPACE排序规则的字符串值进行排序时使用的字节数。服务器只使用任何这样的值的第一个max_sort_length字节，而忽略其余的。因此，只有在第一个max_sort_length字节之后才不同的值对于GROUP BY, ORDER BY和DISTINCT操作比较为相等。(这种行为与以前版本的MySQL不同，在那里这个设置应用于比较中使用的所有值。)增加max_sort_length的值可能也需要增加sort_buffer_size的值。详细信息请参见\xc2\xa08.2.1.16节，\xe2\x80\x9cORDER BY Optimization\xe2\x80\x9d '",max_sort_length,
max_insert_delayed_threads,26. 这个变量是max_delayed_threads的同义词。与max_delayed_threads一样，它已被弃用(因为不支持延迟插入)，并可能在未来的MySQL版本中删除。从MySQL 8.0.27开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限制的会话变量。参见\xc2\xa05.1.9.1， \xe2\x80\x9c系统变量权限\xe2\x80\x9d。”,max_insert_delayed_threads,
min_examined_row_limit,27. 检查的行数少于此数的查询不会记录到慢速查询日志中。从MySQL 8.0.27开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限制的会话变量。参见\xc2\xa05.1.9.1， \xe2\x80\x9c系统变量权限\xe2\x80\x9d。”,min_examined_row_limit,
net_buffer_length,28. 每个客户端线程都与一个连接缓冲区和结果缓冲区相关联。两者都以net_buffer_length给定的大小开始，但根据需要动态扩大到max_allowed_packet字节。结果缓冲区在每个SQL语句之后收缩到net_buffer_length。这个变量通常不应该被修改，但是如果你的内存非常少，你可以将它设置为客户端发送的语句的预期长度。如果语句超过了这个长度，连接缓冲区就会自动放大。net_buffer_length可设置的最大值为1MB。该变量的会话值为只读。”,net_buffer_length,
interactive_timeout,29. 服务器在关闭交互式连接之前等待该连接活动的秒数。交互式客户端定义为使用mysql_real_connect()的CLIENT_INTERACTIVE选项的客户端。参见wait_timeout。”,net_interactive_timeout,
net_read_timeout,30. 在中断读取之前等待连接中更多数据的秒数。当服务器从客户端读取数据时，net_read_timeout是控制何时中止的超时值。当服务器向客户端写入数据时，net_write_timeout是控制何时中止的超时值。另见replica_net_timeout和slave_net_timeout。”,net_read_timeout,
net_retry_count,31. 如果通信端口上的读写中断，在放弃之前重试多次。这个值在FreeBSD上应该设置得相当高，因为内部中断被发送给所有线程。”,net_retry_count,
wait_timeout,32. 服务器在关闭非交互式连接之前等待活动的秒数。在线程启动时，根据客户端类型(由mysql_real_connect()的CLIENT_INTERACTIVE连接选项定义)，从全局wait_timeout值或从全局interactive_timeout值初始化会话wait_timeout值。另请参见interactive_timeout。”,net_wait_timeout,
net_write_timeout,33. 在终止写操作之前等待将一个块写入连接所需的秒数。另请参见net_read_timeout。”,net_write_timeout,
optimizer_prune_level,34. 控制在查询优化期间应用的启发式算法，从优化器搜索空间中修剪不太有希望的部分计划。值为0禁用启发式，以便优化器执行穷举搜索。值为1使优化器根据中间计划检索到的行数对计划进行修剪。”,optimizer_prune_level,
optimizer_search_depth,35. 查询优化器执行的最大搜索深度。大于查询中关系数的值会产生更好的查询计划，但需要更长的时间来生成查询的执行计划。小于查询中关系数的值会更快地返回执行计划，但生成的计划可能远不是最优的。如果设置为0，系统会自动选择一个合理的值。”,optimizer_search_depth,
parser_max_mem_size,36. 解析器可用的最大内存量。默认值对可用内存没有限制。该值可以减少，以防止解析长或复杂的SQL语句导致内存不足的情况。”,parser_max_mem_size,
range_optimizer_max_mem_size,37. 范围优化器的内存消耗限制。值为0表示\xe2\x80\x9cno限制。\xe2\x80\x9d如果优化器考虑的执行计划使用范围访问方法，但优化器估计该方法所需的内容量将超过限制，则放弃该计划并考虑其他计划。有关更多信息，请参见限制范围优化的内存使用。”,range_optimizer_max_mem_size,
preload_buffer_size,38. 预加载索引时分配的缓冲区大小。从MySQL 8.0.27开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限制的会话变量。参见\xc2\xa05.1.9.1节，\xe2\x80\x9cSystem Variable Privileges\xe2\x80\x9d。”,preload_buff_size,
profiling_history_size,39. 如果启用了分析，则需要维护分析信息的语句数。默认值是15条。最大值为100。将该值设置为0有效地禁用了分析。参见\xc2\xa013.7.7.31节，\xe2\x80\x9cSHOW PROFILES语句\xe2\x80\x9d。此变量已弃用;预计它将在未来的MySQL版本中被删除。”,profiling_history_size,
read_buffer_size,40. 对MyISAM表进行顺序扫描的每个线程为它扫描的每个表分配一个这样大小(以字节为单位)的缓冲区。如果你做了很多次顺序扫描，你可能想要增加这个值，默认值是131072。这个变量的值应该是4KB的倍数。如果设置的值不是4KB的倍数，则将其值四舍五入到最接近的4KB倍数。这个选项也在以下上下文中用于除InnoDB之外的所有其他存储引擎:用于在临时文件(不是临时表)中缓存索引，当对行进行ORDER BY排序时。用于批量插入到分区。用于缓存嵌套查询的结果。read_buffer_size也用于另一种特定于存储引擎的方式:确定内存表的内存块大小。从MySQL 8.0.22开始，在执行SELECT INTO DUMPFILE和SELECT INTO OUTFILE语句时，使用select_into_buffer_size的值来代替read_buffer_size的值作为I/O缓存缓冲区。(read_buffer_size用于所有其他情况下的I/O缓存缓冲区大小。)有关不同操作期间内存使用的更多信息，请参见\xc2\xa08.12.3.1节，\xe2\x80\x9cHow MySQL使用内存\xe2\x80\x9d。”,read_buff_size,
read_rnd_buffer_size,41. 该变量用于从MyISAM表中读取数据，并且对于任何存储引擎，用于多范围读取优化。当在键排序操作之后按排序顺序从MyISAM表中读取行时，将通过该缓冲区读取行，以避免磁盘查找。参见\xc2\xa08.2.1.16节，\xe2\x80\x9cORDER BY Optimization\xe2\x80\x9d。将该变量设置为较大的值可以大大提高ORDER BY性能。但是，这是为每个客户端分配的缓冲区，所以不应该将全局变量设置为较大的值。相反，只在那些需要运行大型查询的客户端中更改会话变量。有关不同操作期间内存使用的更多信息，请参见\xc2\xa08.12.3.1节，\xe2\x80\x9cHow MySQL使用内存\xe2\x80\x9d。有关多范围读取优化的信息，请参见\xc2\xa08.2.1.11， \xe2\x80\x9cMultiRange读取优化\xe2\x80\x9d节。”,read_rnd_buff_size,
div_precision_increment,42. 该变量表示使用/运算符进行除法运算时增加结果比例的位数。默认值为4。最小值为0，最大值为30。下面的例子演示了增加默认值的效果。”,div_precincrement,
sort_buffer_size,43. 每个必须执行排序的会话分配一个这样大小的缓冲区。Sort_buffer_size不是特定于任何存储引擎的，而是以通用的方式应用于优化。至少sort_buffer_size值必须足够大，以便在排序缓冲区中容纳15个元组。同样，增加max_sort_length的值可能需要增加sort_buffer_size的值。有关更多信息，请参见\xc2\xa08.2.1.16节，\xe2\x80\x9cORDER BY优化\xe2\x80\x9d如果您在SHOW GLOBAL STATUS输出中看到每秒有许多次Sort_merge_passes，您可以考虑增加sort_buffer_size值来加速无法通过查询优化或改进索引来改进的ORDER BY或GROUP BY操作。优化器会尝试计算出需要多少空间，但可以分配更多的空间，直到极限。将其设置为比全局所需的更大会减慢大多数执行排序的查询。最好将其作为会话设置增加，并且仅适用于需要更大大小的会话。在Linux上，有256KB和2MB的阈值，较大的值可能会显著降低内存分配速度，因此您应该考虑保持在这些值以下。通过实验来找到适合您工作负载的最佳值。参见节\xc2\xa0B.3.3.5， \xe2\x80\x9c MySQL在哪里存储临时文件\xe2\x80\x9d。sort_buffer_size的最大允许设置为4GB\xe2\x88\x921。64位平台允许更大的值(64位Windows除外，对于64位Windows，较大的值被截断为4GB\xe2\x88\x921并发出警告)。”,sortbuff_size,
max_sp_recursion_depth,44. 任何给定存储过程可能被递归调用的次数。此选项的默认值为0，这完全禁用了存储过程中的递归。最大值为255。存储过程递归增加了对线程堆栈空间的需求。如果增加max_sp_recursion_depth的值，可能需要在服务器启动时通过增加thread_stack的值来增加线程堆栈的大小。”,max_sp_recursion_depth,
default_week_format,45. 用于WEEK()函数的默认模式值。参见\xc2\xa012.7节，\xe2\x80\x9cDate and Time Functions\xe2\x80\x9d。”,default_week_format,
max_seeks_for_key,46. 在根据键查找行时，限制假定的最大查找次数。MySQL优化器假设，当通过扫描索引在表中搜索匹配行时，不需要超过这个数量的键查找，而不管索引的实际基数是多少(参见\xc2\xa013.7.7.22节，\xe2\x80\x9cSHOW index Statement\xe2\x80\x9d)。通过将其设置为一个较低的值(例如100)，您可以强制MySQL更喜欢索引而不是表扫描。”,max_seeks_for_key,
range_alloc_block_size,"47. 在进行范围优化时分配的块的字节大小。字节数的块大小为1024。在存储系统变量的值之前，MySQL服务器将不是块大小的精确倍数的值四舍五入到块大小的下一个较小的倍数。解析器允许平台的最大无符号整数值(32位系统为4294967295或232\xe2\x88\x921, 64位系统为18446744073709551615或264\xe2\x88\x921)，但实际最大值比块大小低。”",range_alloc_block_size,
query_alloc_block_size,"48. 为语句解析和执行期间创建的对象分配的内存块的字节大小。如果你有内存碎片的问题，增大这个参数可能会有帮助。字节数的块大小为1024。在存储系统变量的值之前，MySQL服务器将不是块大小的精确倍数的值四舍五入到块大小的下一个较小的倍数。解析器允许平台的最大无符号整数值(32位系统为4294967295或232\xe2\x88\x921, 64位系统为18446744073709551615或264\xe2\x88\x921)，但实际最大值比块大小低。”",query_alloc_block_size,
query_prealloc_size,"49. MySQL 8.0.28及更早版本:设置用于语句解析和执行的持久缓冲区的大小(以字节为单位)。该缓冲区在语句之间不会被释放。如果您正在运行复杂的查询，较大的query_prealloc_size值可能有助于提高性能，因为它可以减少服务器在查询执行操作期间执行内存分配的需要。你应该意识到，这样做并不一定会完全消除分配;在某些情况下，服务器可能仍然会分配内存，比如与事务相关的操作，或者存储程序。从MySQL 8.0.29开始，query_prealloc_size已被弃用，设置它不再有任何影响;你应该期待它在未来的MySQL版本中被删除。块大小是1024。在存储系统变量的值之前，MySQL服务器将不是块大小的精确倍数的值四舍五入到块大小的下一个较小的倍数。解析器允许平台的最大无符号整数值(32位系统为4294967295或232\xe2\x88\x921, 64位系统为18446744073709551615或264\xe2\x88\x921)，但实际最大值比块大小低。”",query_prealloc_size,
transaction_alloc_block_size,50. 增加需要内存的多事务内存池的字节数。参见transaction_prealloc_size的描述。”,trans_alloc_block_size,
transaction_prealloc_size,51. 存在一个多事务内存池，各种与事务相关的分配从中占用内存。池的初始大小(以字节为单位)是transaction_prealloc_size。对于每个由于可用内存不足而无法从池中满足的分配，池将增加transaction_alloc_block_size字节。当事务结束时，池被截断为transaction_prealloc_size字节。通过使transaction_prealloc_size足够大以包含单个事务中的所有语句，您可以避免多次malloc()调用。从MySQL 8.0.29开始，transaction_prealloc_size已弃用;事务内存池的初始大小是固定的，设置这个变量不再有任何影响。(transaction_alloc_block_size的功能不受此更改的影响。)期望transaction_prealloc_size在未来的MySQL版本中被删除。”,trans_prealloc_size,
group_concat_max_len,52. GROUP_CONCAT()函数允许的最大结果长度(以字节为单位)。默认值是1024。”,group_concat_max_len,
rbr_exec_mode,53. STRICTIDEMPOTENT供mysqlbinlog内部使用。该变量在IDEMPOTENT模式和STRICT模式之间切换服务器。IDEMPOTENT模式会抑制mysqlbinlog生成的BINLOG语句中的duplicatekey和nokeyfound错误。当在服务器上重播基于行的二进制日志导致与现有数据冲突时，此模式非常有用。当您指定幂等选项时，mysqlbinlog通过在输出中写入以下内容来设置此模式:从MySQL 8.0.18开始，设置此系统变量的会话值不再是受限制的操作。”,rbr_exec_mode_options,
completion_type,54. NO_CHAIN RELEASE 0 1 2事务完成类型。这个变量可以取下表所示的值。变量可以使用名称值或相应的整数值进行赋值。completion_type影响以START TRANSACTION或以COMMIT或ROLLBACK开始并结束的事务。它不适用于执行\xc2\xa013.3.3， \xe2\x80\ x9c节中列出的语句导致隐式提交\xe2\x80\x9d的语句所导致的隐式提交。它也不适用于XA COMMIT、XA ROLLBACK或autocommit=1。”,completion_type,
transaction_isolation,55. READUNCOMMITTED READCOMMITTED REPEATABLEREAD SERIALIZABLE事务隔离级别。默认值是REPEATABLEREAD。事务隔离级别有三个作用域:全局、会话和下一个事务。这个三作用域的实现导致了一些非标准的隔离级赋值语义，后面会描述。要在启动时设置全局事务隔离级别，请使用transactionisolation server选项。在运行时，可以使用SET语句直接设置隔离级别，为transaction_isolation系统变量赋值，也可以使用SET TRANSACTION语句间接设置隔离级别。如果直接将transaction_isolation设置为包含空格的隔离级别名称，则该名称应用引号括起来，空格用破折号代替。例如，使用SET语句设置全局值:设置全局transaction_isolation值将设置所有后续会话的隔离级别。现有会话不受影响。使用SET语句设置会话或nextlevel transaction_isolation的值。对于大多数会话系统变量，这些语句是设置值的等效方式:如前所述，事务隔离级别除了全局和会话作用域外，还有一个nexttransaction作用域。要设置nexttransaction作用域，分配会话系统变量值的SET语法具有transaction_isolation的非标准语义:要设置会话隔离级别，请使用以下语法中的任何一种:对于每一种语法，应用这些语义:为会话中执行的所有后续事务设置隔离级别。允许在事务内进行，但不影响当前正在进行的事务。如果在事务之间执行，则覆盖前面设置next事务隔离级别的任何语句。对应于SETSESSION事务隔离级别(使用SESSION关键字)。要设置下一个事务隔离级别，请使用以下语法:对于该语法，应用以下语义:仅为会话中执行的下一个事务设置隔离级别。随后的事务恢复到会话隔离级别。事务中不允许。对应于SET事务隔离级别(不带SESSION关键字)。有关SET TRANSACTION及其与transaction_isolation系统变量的关系的更多信息，请参见\xc2\xa013.3.7节，\xe2\x80\x9cSET TRANSACTION语句\xe2\x80\x9d。”,transaction_isolation,
updatable_views_with_limit,56. 这个变量控制当视图不包含底层表中定义的主键的所有列时，如果更新语句包含一个LIMIT子句，是否可以对视图进行更新。(这种更新通常是由GUI工具生成的。)更新是一个update或DELETE语句。这里的主键是指一个Primary key，或者一个唯一的索引，其中没有列可以包含NULL。该变量可以有两个值:1或YES:只发出警告(不是错误消息)。这是默认值。0或NO:禁止更新。”,updatable_views_with_limit,
max_user_connections,57. 任何给定MySQL用户帐户允许的最大同时连接数。值为0(默认值)表示\xe2\x80\x9cno限制。\xe2\x80\x9d这个变量有一个全局值，可以在服务器启动或运行时设置。它还有一个只读会话值，表示适用于与当前会话关联的帐户的有效同步连接限制。会话值初始化如下:如果用户帐户的MAX_USER_CONNECTIONS资源限制为非零，则将会话的MAX_USER_CONNECTIONS值设置为该限制。否则，将会话max_user_connections的值设置为全局值。帐户资源限制使用CREATE USER或ALTER USER语句指定。参见\xc2\xa06.2.21节，\xe2\x80\ x9c设置帐户资源限制\xe2\x80\x9d。”,max_user_connections,
block_encryption_mode,58. 该变量控制基于块的算法(如AES)的块加密模式。它影响AES_ENCRYPT()和AES_DECRYPT()的加密。Block_encryption_mode接受aeskeylenmode格式的值，其中keylen是密钥长度(以位为单位)，mode是加密模式。该值不区分大小写。允许的keylen值为128、192和256。允许的模式值为ECB、CBC、CFB1、CFB8、CFB128和OFB。例如，此语句导致AES加密函数使用256位密钥长度和CBC模式:尝试将block_encryption_mode设置为包含不支持的密钥长度或SSL库不支持的模式的值时会发生更新。”,my_aes_mode,
transaction_read_only,59. 事务访问模式。取值为OFF(读/写;默认值为off或ON(只读)。事务访问模式有三个作用域:全局、会话和下一个事务。这个三作用域的实现导致了一些非标准的访问模式赋值语义，后面会描述。要在启动时设置全局事务访问模式，请使用transactionreadonly server选项。在运行时，可以使用SET语句直接设置访问模式，为transaction_read_only系统变量赋值，也可以使用SET TRANSACTION语句间接设置访问模式。例如，使用SET语句设置全局值:设置全局transaction_read_only值将为所有后续会话设置访问模式。现有会话不受影响。要设置会话或nextlevel transaction_read_only值，请使用SET语句。对于大多数会话系统变量，这些语句是设置值的等效方式:如前所述，事务访问模式除了全局和会话作用域外，还有一个nexttransaction作用域。要设置nexttransaction作用域，用于分配会话系统变量值的SET语法具有transaction_read_only的非标准语义。要设置会话访问模式，请使用以下语法中的任何一种:对于每种语法，应用这些语义:为会话中执行的所有后续事务设置访问模式。允许在事务内进行，但不影响当前正在进行的事务。如果在事务之间执行，则覆盖前面设置nexttransaction访问模式的任何语句。对应于SET SESSION TRANSACTION {READ WRITE | READ ONLY}(带SESSION关键字)。要设置nexttransaction访问模式，请使用以下语法:对于该语法，应用以下语义:仅为会话中执行的下一个事务设置访问模式。随后的事务恢复到会话访问模式。事务中不允许。对应于SET TRANSACTION {READ WRITE | READ ONLY}(不带SESSION关键字)。有关SET TRANSACTION及其与transaction_read_only系统变量的关系的更多信息，请参见\xc2\xa013.3.7节，\xe2\x80\x9cSET TRANSACTION语句\xe2\x80\x9d。”,transaction_read_only,
low_priority_updates,60. 如果设置为1，所有的INSERT、UPDATE、DELETE和LOCK TABLE WRITE语句都将等待，直到受影响的表上没有未决的SELECT或LOCK TABLE READ。同样的效果可以使用{INSERT | REPLACE | DELETE | UPDATE} LOW_PRIORITY…来降低仅一个查询的优先级。这个变量只影响只使用表级锁的存储引擎(如MyISAM、MEMORY和MERGE)。参见\xc2\xa08.11.2节，\xe2\x80\x9cTable Locking Issues\xe2\x80\x9d。从MySQL 8.0.27开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限制的会话变量。参见\xc2\xa05.1.9.1节，\xe2\x80\x9cSystem Variable Privileges\xe2\x80\x9d。”,low_priority_updates,
new,61. 这个变量在MySQL 4.0中用于打开一些4.1的行为，并且为了向后兼容而保留。它的值总是OFF。在NDB集群中，将这个变量设置为ON可以在NDB表中使用KEY或LINEAR KEY以外的分区类型。此功能仅是实验性的，不支持在生产环境中使用。有关其他信息，请参见用户定义分区和NDB存储引擎(NDB集群)。”,new_mode,
keep_files_on_create,62. 如果创建的MyISAM表没有数据目录选项，则在数据库目录中创建. myd文件。默认情况下，如果MyISAM在本例中找到一个现有的. myd文件，它将覆盖它。这同样适用于没有INDEX DIRECTORY选项的表的. myi文件。要抑制这种行为，可以将keep_files_on_create变量设置为ON(1)，在这种情况下，MyISAM不会覆盖现有文件，而是返回一个错误。默认值是OFF(0)。如果创建一个带有数据目录或INDEX DIRECTORY选项的MyISAM表，并且找到一个现有的. myd或. myi文件，MyISAM总是返回一个错误。它不会覆盖指定目录下的文件。”,keep_files_on_create,
old_alter_table,63. 当启用该变量时，服务器不会使用处理ALTER TABLE操作的优化方法。它恢复到使用临时表，复制数据，然后将临时表重命名为原始表，就像MySQL 5.0和更早版本所使用的那样。有关ALTER TABLE操作的更多信息，请参见\xc2\xa013.1.9节，\xe2\x80\x9cALTER TABLE语句\xe2\x80\x9d。ALTER TABLE…DROP PARTITION with old_alter_table=ON重建分区表，并尝试将数据从被删除的分区移动到另一个具有兼容PARTITION的分区…价值观的定义。删除不能移动到其他分区的数据。在早期版本中，ALTER TABLE…DROP PARTITION with old_alter_table=ON删除分区中存储的数据，并删除该分区。”,old_alter_table,
big_tables,64. 如果启用，服务器将所有临时表存储在磁盘上而不是内存中。对于需要大型临时表的SELECT操作，这可以防止大多数表tbl_name是full错误，但也会减慢内存表足够的查询速度。新连接的默认值是OFF(使用内存临时表)。通常情况下，不应该启用这个变量。当内存中的内部临时表由TempTable存储引擎管理(默认)，并且超过TempTable存储引擎占用的最大内存时，TempTable存储引擎开始将数据存储到磁盘上的临时文件中。当内存中的临时表由MEMORY存储引擎管理时，内存中的表会根据需要自动转换为基于磁盘的表。有关详细信息，请参见\xc2\xa08.4.4节，\xe2\x80\x9c在MySQL\xe2\x80\x9d中的内部临时表使用。”,big_tables,
default_storage_engine,65. 表的默认存储引擎。参见\xc2\xa016章，替代存储引擎。该变量仅为永久表设置存储引擎。要设置TEMPORARY表的存储引擎，请设置default_tmp_storage_engine系统变量。要查看哪些存储引擎可用并已启用，请使用SHOW ENGINES语句或查询INFORMATION_SCHEMA ENGINES表。如果在服务器启动时禁用默认存储引擎，则必须将永久表和TEMPORARY表的默认引擎设置为不同的引擎，否则服务器不会启动。”,table_plugin,
default_tmp_storage_engine,66. TEMPORARY表的默认存储引擎(使用CREATE TEMPORARY TABLE创建)。要设置永久表的存储引擎，需要设置default_storage_engine系统变量。另请参阅关于该变量可能值的讨论。如果在服务器启动时禁用默认存储引擎，则必须将永久表和TEMPORARY表的默认引擎设置为不同的引擎，否则服务器不会启动。”,temp_table_plugin,
character_set_filesystem,67. 文件系统字符集。该变量用于解释引用文件名的字符串字面值，例如在LOAD DATA和SELECT…INTO OUTFILE语句和LOAD_FILE()函数。这样的文件名在文件打开尝试发生之前从character_set_client转换为character_set_filesystem。默认值是binary，这意味着不发生转换。对于允许使用多字节文件名的系统，使用不同的值可能更合适。例如，如果系统使用UTF8表示文件名，则将character_set_filesystem设置为'utf8mb4'。从MySQL 8.0.14开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限的会话变量。参见\xc2\xa05.1.9.1节，\xe2\x80\x9cSystem Variable Privileges\xe2\x80\x9d。”,character_set_filesystem,
character_set_client,68. 从客户端到达的语句的字符集。当客户端连接到服务器时，使用客户端请求的字符集来设置此变量的会话值。(许多客户端支持defaultcharacterset选项，以启用显式指定此字符集。另请参阅\xc2\xa010.4， \xe2\x80\x9cConnection字符集和排序规则\xe2\x80\x9d节。)当客户端请求的值未知或不可用时，或者服务器配置为忽略客户端请求时，该变量的全局值用于设置会话值:客户端请求服务器不知道的字符集。例如，启用日语的客户端在连接未配置sjis支持的服务器时请求sjis。客户端来自比MySQL 4.1更老的MySQL版本，因此不请求字符集。Mysqld是用skipcharactersetcliententhandshake选项启动的，这会导致它忽略客户端字符集配置。这将重现MySQL 4.0的行为，如果您希望在不升级所有客户端的情况下升级服务器，这将非常有用。有些字符集不能用作客户端字符集。尝试使用它们作为character_set_client值会产生一个错误。请参阅不允许的客户端字符集。”,character_set_client,
character_set_results,69. 用于向客户端返回查询结果的字符集。这包括列值等结果数据、列名等结果元数据和错误消息。”,character_set_results,
character_set_server,70. 服务器默认的字符集。参见\xc2\xa010.15节，\xe2\x80\x9c字符集配置\xe2\x80\x9d。如果设置了这个变量，还应该设置collation_server来指定字符集的排序规则。”,collation_server,
character_set_database,71. 默认数据库使用的字符集。每当默认数据库发生变化时，服务器就设置这个变量。如果没有默认数据库，则该变量具有与character_set_server相同的值。从MySQL 8.0.14开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限的会话变量。参见\xc2\xa05.1.9.1节，\xe2\x80\x9cSystem Variable Privileges\xe2\x80\x9d。全局character_set_database和collation_database系统变量已弃用;预计它们将在未来的MySQL版本中被删除。不赞成给会话character_set_database和collation_database系统变量赋值，赋值会产生警告。在MySQL的未来版本中，会话变量将变为只读(并且对它们的赋值将产生错误)，在这个版本中，仍然可以访问会话变量来确定默认数据库的数据库字符集和排序。”,collation_database,
character_set_connection,72. 用于没有字符集引入器指定的字面量和用于数字到字符串转换的字符集。有关介绍人的信息，请参见\xc2\xa010.3.8节，\xe2\x80\x9c字符集介绍人\xe2\x80\x9d。”,collation_connection,
lc_messages,73. 用于错误消息的区域设置。默认值是en_US。服务器将参数转换为语言名称，并将其与lc_messages_dir的值组合以生成错误消息文件的位置。参见\xc2\xa010.12节，\xe2\x80\x9cSetting the Error Message Language\xe2\x80\x9d。”,lc_messages,
lc_time_names,74. 此变量指定控制用于显示日期和月份名称及缩写的语言的区域设置。该变量影响DATE_FORMAT()、DAYNAME()和MONTHNAME()函数的输出。区域名称是POSIXstyle值，如'ja_JP'或'pt_BR'。默认值是'en_US'，与系统的语言环境设置无关。有关详细信息，请参阅“\xc2\xa010.16， \xe2\x80\x9cMySQL服务器语言环境支持\xe2\x80\x9d”部分。,lc_time_names,
time_zone,75. 当前时区。此变量用于初始化连接的每个客户端的时区。默认情况下，它的初始值是'SYSTEM'(这意味着\xe2\x80\ x9use system_time_zone\xe2\x80\x9d)。该值可以在服务器启动时通过defaulttimezone选项显式指定。请参阅\xc2\xa05.1.15节，\xe2\x80\x9cMySQL服务器时区支持\xe2\x80\x9d。如果设置为SYSTEM，则每个需要进行时区计算的MySQL函数调用都会调用系统库来确定当前的系统时区。这个调用可能被全局互斥锁保护，导致争用。”,time_zone,
explicit_defaults_for_timestamp,76. 这个系统变量决定服务器是否为TIMESTAMP列中的默认值和NULLvalue处理启用某些非标准行为。默认情况下，启用了explicit_defaults_for_timestamp，它禁用了非标准行为。禁用explicit_defaults_for_timestamp会导致警告。从MySQL 8.0.18开始，设置这个系统变量的会话值不再是一个受限制的操作。如果禁用了explicit_defaults_for_timestamp，服务器将启用非标准行为，并按如下方式处理TIMESTAMP列:未显式使用NULL属性声明的TIMESTAMP列将自动使用NOT NULL属性声明。允许为这样的列赋NULL值，并将列设置为当前时间戳。异常:从MySQL 8.0.22开始，尝试在生成的列中插入NULL，声明为TIMESTAMP NOT NULL，将被拒绝并产生一个错误。表中的第一个TIMESTAMP列，如果没有显式地使用NULL属性或显式的DEFAULT或ON UPDATE属性声明，则会自动使用DEFAULT CURRENT_TIMESTAMP和ON UPDATE CURRENT_TIMESTAMP属性声明。第一个后面的TIMESTAMP列，如果没有显式地使用NULL属性或显式的DEFAULT属性声明，将自动声明为DEFAULT '00000000 00:00:00' (\xe2\x80\x9czero\xe2\x80\x9d时间戳)。对于没有为这样的列指定显式值的插入行，该列被分配为'00000000 00:00:00'并且不会出现警告。根据是否启用严格SQL模式或NO_ZERO_DATE SQL模式，默认值'00000000 00:00:00'可能无效。请注意，TRADITIONAL SQL模式包括严格模式和NO_ZERO_DATE。参见节\xc2\xa05.1.11， \xe2\x80\x9cServer SQL模式\xe2\x80\x9d。刚才描述的非标准行为已弃用;希望它们在未来的MySQL版本中被删除。如果启用了explicit_defaults_for_timestamp，服务器将禁用非标准行为并按如下方式处理TIMESTAMP列:不可能为TIMESTAMP列分配NULL值以将其设置为当前时间戳。要分配当前时间戳，请将列设置为CURRENT_TIMESTAMP或NOW()之类的同义词。未显式使用NOT NULL属性声明的TIMESTAMP列将自动使用NULL属性声明，并允许NULL值。将这样的列赋值为NULL将其设置为NULL，而不是当前的时间戳。用NOT NULL属性声明的TIMESTAMP列不允许NULL值。对于为这样的列指定NULL的插入，如果启用了严格SQL模式，则结果对于单行插入是错误的，或者对于禁用严格SQL模式的多行插入是插入'00000000 00:00:00'。在任何情况下，为列赋NULL值都不会将其设置为当前时间戳。用NOT NULL属性显式声明且没有显式DEFAULT属性的TIMESTAMP列被视为没有默认值。对于没有为这样的列指定显式值的插入行，结果取决于SQL模式。如果启用严格SQL模式，则会出现错误。如果未启用严格的SQL模式，则使用隐式默认值'00000000 00:00:00'声明该列，并出现警告。这类似于MySQL处理其他时间类型(如DATETIME)的方式。没有TIMESTAMP列是用DEFAULT CURRENT_TIMESTAMP或ON UPDATE CURRENT_TIMESTAMP属性自动声明的。这些属性必须显式指定。表中第一个TIMESTAMP列的处理方式与第一个TIMESTAMP列之后的处理方式没有区别。如果在服务器启动时禁用explicit_defaults_for_timestamp，则在错误日志中出现此警告:正如警告所示，要禁用已弃用的非标准行为，请在服务器启动时启用explicit_defaults_for_timestamp系统变量。explicit_defaults_for_timestamp本身是不赞成的，因为它的唯一目的是允许控制不赞成的TIMESTAMP行为，这些行为将在未来的MySQL版本中被删除。当这些行为被删除时，期望explicit_defaults_for_timestamp也被删除。有关更多信息，请参阅\xc2\xa011.2.5， \xe2\x80\x9c \xe2\x80\x9d的TIMESTAMP和DATETIME的自动初始化和更新。,explicit_defaults_for_timestamp,
long_query_time,77. 如果查询花费的时间超过这个数秒，服务器将增加Slow_queries状态变量。如果启用了慢速查询日志，则查询将被记录到慢速查询日志文件中。这个值是实时测量的，而不是CPU时间，因此在负载较轻的系统上低于阈值的查询可能在负载较重的系统上高于阈值。long_query_time的最小值和默认值分别为0和10。最大值为31536000，即365天，单位为秒。可指定以微秒为单位的分辨率。参见\xc2\xa05.4.5节，\xe2\x80\x9c慢速查询日志\xe2\x80\x9d。这个变量的值越小，会导致更多的语句被认为是长时间运行的，结果是需要更多的空间来存储慢速查询日志。对于非常小的值(少于一秒)，日志可能会在很短的时间内变得相当大。增加被认为长时间运行的语句的数量也可能导致MySQL企业监视器中的\xe2\x80\x9d“长时间运行的进程数量过多\xe2\x80\x9d”警报误报，特别是如果启用了组复制。由于这些原因，非常小的值应该只在测试环境中使用，或者，在生产环境中，只在短时间内使用。Mysqldump执行全表扫描，这意味着它的查询通常可以超过对常规查询有用的long_query_time设置。从MySQL 8.0.30开始，如果您想从慢速查询日志中排除大部分或全部mysqldump\xe2\x80\x99的查询，您可以设置mysqldump\xe2\x80\x99的mysqldlongquerytime命令行选项，将系统变量的会话值更改为更高的值。”,long_query_time_double,
session_track_gtids,78. OFF OWN_GTID ALL_GTIDS控制服务器是否向客户端返回GTIDs，使客户端能够使用它们来跟踪服务器状态。根据变量值，在执行每个事务结束时，服务器\xe2\x80\x99的GTIDs将被捕获并作为确认的一部分返回给客户机。session_track_gtids可能的取值如下:OFF:服务器不向客户端返回GTIDs。这是默认值。OWN_GTID:服务器返回自上次确认以来该客户端在其当前会话中成功提交的所有事务的GTIDs。通常，这是最后提交的事务的单个GTID，但如果单个客户机请求导致多个事务，则服务器返回包含所有相关GTID的GTID集。ALL_GTIDS:服务器返回其gtid_performed系统变量的全局值，它在事务成功提交后的某个时刻读取该变量。除了刚刚提交的事务的GTID之外，这个GTID集还包括任何客户端在服务器上提交的所有事务，并且可以包括在当前被确认的事务提交之后提交的事务。Session_track_gtids不能在事务上下文中设置。有关会话状态跟踪的更多信息，请参见\xc2\xa05.1.18节，\xe2\x80\x9cServer跟踪客户端会话状态\xe2\x80\x9d。”,session_track_gtids,
max_execution_time,79. SELECT语句的执行超时，以毫秒为单位。如果该值为0，则不启用超时。max_execution_time的应用如下:全局max_execution_time值为新连接的会话值提供默认值。会话值适用于在会话中执行的SELECT执行，其中不包含MAX_EXECUTION_TIME(N)优化器提示或N为0。max_execution_time适用于只读SELECT语句。非只读语句是那些调用存储函数的语句，其副作用是修改数据。对于存储程序中的SELECT语句，max_execution_time被忽略。”,max_execution_time,
session_track_system_variables,80. 控制服务器是否跟踪会话系统变量的分配，并通知客户端每个分配的变量的名称和值。变量值是一个逗号分隔的变量列表，用于跟踪分配。默认情况下，对time_zone、autocommit、character_set_client、character_set_results和character_set_connection启用通知。(后三个变量为受SET NAMES影响的变量。)要为处理的每个语句启用语句ID的显示，请使用statement_id变量。例如:特殊值*使服务器跟踪对所有会话变量的赋值。如果给定，这个值必须由自身指定，不需要指定特定的系统变量名。此值还支持显示每个成功处理的语句的语句ID。要禁用会话变量分配的通知，将session_track_system_variables设置为空字符串。如果启用会话系统变量跟踪，则对所有被跟踪会话变量的赋值都会发生通知，即使新值与旧值相同。有关会话状态跟踪的更多信息，请参见\xc2\xa05.1.18节，\xe2\x80\x9cServer跟踪客户端会话状态\xe2\x80\x9d。”,track_sysvars_ptr,
session_track_schema,81. 控制服务器是否跟踪当前会话中设置默认模式(数据库)的时间，并通知客户端使模式名称可用。如果启用模式名称跟踪器，则每次设置默认模式时都会发生名称通知，即使新模式名称与旧模式名称相同。有关会话状态跟踪的更多信息，请参见\xc2\xa05.1.18节，\xe2\x80\x9cServer跟踪客户端会话状态\xe2\x80\x9d。”,session_track_schema,
session_track_state_change,82. 控制服务器是否跟踪当前会话状态的更改，并在状态发生更改时通知客户端。可以为客户端会话状态的这些属性报告更改:默认模式(数据库)。系统变量的特定于会话的值。Userdefined变量。临时表。准备好的语句。如果启用会话状态跟踪器，则每次涉及跟踪会话属性的更改都会发生通知，即使新的属性值与旧的相同。例如，将用户定义的变量设置为其当前值会产生通知。session_track_state_change变量只控制何时发生变化的通知，而不控制变化是什么。例如，当设置默认模式或分配跟踪会话系统变量时，会发生statechange通知，但通知不包括模式名称或变量值。要接收模式名称或会话系统变量值的通知，请分别使用session_track_schema或session_track_system_variables系统变量。给session_track_state_change赋值本身不被认为是状态改变，也不会这样报告。然而，如果它的名字列在session_track_system_variables的值中，对它的任何赋值都会导致新值的通知。有关会话状态跟踪的更多信息，请参见\xc2\xa05.1.18节，\xe2\x80\x9cServer跟踪客户端会话状态\xe2\x80\x9d。”,session_track_state_change,
session_track_transaction_info,83. OFF STATE CHARACTERISTICS控制服务器是否跟踪当前会话中事务的状态和特征，并通知客户端使此信息可用。这些session_track_transaction_info值是允许的:OFF:关闭事务状态跟踪。这是默认值。STATE:启用不带特征跟踪的事务状态跟踪。状态跟踪使客户端能够确定事务是否正在进行中，以及是否可以在不回滚的情况下将其移动到不同的会话。CHARACTERISTICS:启用事务状态跟踪，包括特征跟踪。特征跟踪使客户端能够确定如何在另一个会话中重新启动事务，使其具有与原始会话相同的特征。以下特征与此目的相关:为了使客户端安全地将事务重新定位到另一个会话，它不仅必须跟踪事务状态，还必须跟踪事务特征。此外，客户端还必须跟踪transaction_isolation和transaction_read_only系统变量，以正确确定会话默认值。(要跟踪这些变量，请在session_track_system_variables系统变量的值中列出它们。)有关会话状态跟踪的更多信息，请参见\xc2\xa05.1.18节，\xe2\x80\x9cServer跟踪客户端会话状态\xe2\x80\x9d。”,session_track_transaction_info,
information_schema_stats_expiry,84. 一些INFORMATION_SCHEMA表包含提供表统计信息的列:这些列表示动态表元数据;即随着表内容的变化而变化的信息。默认情况下，MySQL从数据库中检索这些列的缓存值。Index_stats和mysql。查询列时的Table_stats字典表，这比直接从存储引擎中检索统计数据更高效。如果缓存的统计数据不可用或已经过期，MySQL从存储引擎中检索最新的统计数据并将其缓存在MySQL中。Index_stats和mysql。Table_stats字典表。后续查询检索缓存的统计信息，直到缓存的统计信息过期。服务器重启或第一次打开mysql。Index_stats和mysql。Table_stats表不会自动更新缓存的统计信息。information_schema_stats_expiry会话变量定义了缓存的统计数据过期前的时间。默认值是86400秒(24小时)，但时间段可以延长到一年。要随时更新给定表的缓存值，请使用ANALYZE TABLE。要始终直接从存储引擎检索最新的统计数据并绕过缓存的值，请将information_schema_stats_expiry设置为0。查询统计列不会在mysql. sql中存储或更新统计信息。Index_stats和mysql.table_stats字典表在这些情况下:当缓存的统计数据还没有过期。当information_schema_stats_expiry设置为0时。当服务器处于read_only、super_read_only、transaction_read_only或innodb_read_only模式时。当查询还获取Performance Schema数据时。统计数据缓存可能会在multistatement事务期间更新，然后才知道事务是否提交。因此，缓存可能包含与已知提交状态不对应的信息。这可能发生在autocommit=0或START TRANSACTION之后。Information_schema_stats_expiry是一个会话变量，每个客户端会话都可以定义自己的过期值。从存储引擎中检索并由一个会话缓存的统计信息可供其他会话使用。有关相关信息，请参见\xc2\xa08.2.3、\xe2\x80\ x9优化INFORMATION_SCHEMA查询\xe2\x80\x9d节。”,information_schema_stats_expiry,
show_create_table_verbosity,85. 如果行格式是默认格式，SHOW CREATE TABLE通常不显示ROW_FORMAT表选项。启用该变量将导致SHOW CREATE TABLE显示ROW_FORMAT，而不管它是否是默认格式。”,show_create_table_verbosity,
show_old_temporals,"86. SHOW CREATE TABLE输出是否包含标记pre5.6.4格式的时间列的注释(TIME, DATETIME和TIMESTAMP列不支持小数秒精度)。这个变量在默认情况下是禁用的。如果启用，SHOW CREATE TABLE输出如下所示:Information Schema COLUMNS表的COLUMN_TYPE列的输出受到类似的影响。此变量已弃用，并可能在未来的MySQL版本中删除。从MySQL 8.0.27开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限制的会话变量。参见\xc2\xa05.1.9.1节，\xe2\x80\x9cSystem Variable Privileges\xe2\x80\x9d。”",show_old_temporals,
internal_tmp_mem_storage_engine,87. MEMORY TempTable内存内部临时表的存储引擎(参见\xc2\xa08.4.4节，\xe2\x80\x9c内部临时表在MySQL\xe2\x80\x9d中的使用)。允许的值是TempTable(默认值)和MEMORY。优化器为内存中的内部临时表使用由internal_tmp_mem_storage_engine定义的存储引擎。在MySQL 8.0.27中，为internal_tmp_mem_storage_engine配置会话设置需要SESSION_VARIABLES_ADMIN或SYSTEM_VARIABLES_ADMIN权限。”,internal_tmp_mem_storage_engine,
default_collation_for_utf8mb4,88. utf8mb4_0900_ai_ci utf8mb4_general_ci default_collation_for_utf8mb4系统变量仅供MySQL复制内部使用。该变量由服务器设置为utf8mb4字符集的默认排序规则。该变量的值从源复制到副本，以便副本可以正确处理源自具有不同utf8mb4默认排序规则的源的数据。该变量主要用于支持从MySQL 5.7或更早版本的复制源服务器到MySQL 8.0副本服务器的复制，或者支持MySQL 5.7主节点和一个或多个MySQL 8.0从节点的组复制。在MySQL 5.7中，utf8mb4的默认排序规则是utf8mb4_general_ci，但在MySQL 8.0中是utf8mb4_0900_ai_ci。在MySQL 8.0之前的版本中不存在该变量，因此如果副本没有收到该变量的值，它会假设源来自较早的版本，并将该值设置为先前的默认排序规则utf8mb4_general_ci。从MySQL 8.0.18开始，设置这个系统变量的会话值不再是一个受限制的操作。默认的utf8mb4排序规则用于以下语句:SHOW COLLATION和SHOW字符集。CREATETABLE和ALTER TABLE，具有字符集utf8mb4子句，但不包含COLLATION子句，用于表字符集或列字符集。CREATEDATABASE和ALTERDATABASE，使用字符集utf8mb4子句，但不使用COLLATION子句。任何包含_utf8mb4'some text'形式的字符串字面值而没有COLLATE子句的语句。另见\xc2\xa010.9节，\xe2\x80\x9cUnicode支持\xe2\x80\x9d。”,default_collation_for_utf8mb4,
use_secondary_engine,89. OFF开强制供将来使用。是否使用辅助引擎执行查询。用于热浪。参见MySQL热浪用户指南。”,use_secondary_engine,
secondary_engine_cost_threshold,90. 查询卸载到二级引擎的优化器成本阈值。用于热浪。参见MySQL热浪用户指南。”,secondary_engine_cost_threshold,
sql_generate_invisible_primary_key,91. 这个服务器是否添加了一个生成的不可见主键到任何一个没有主键创建的InnoDB表。这个变量不被复制。另外，即使在副本上设置，也会被复制应用程序线程忽略;这意味着，默认情况下，副本不会为任何在源上创建时没有主键的复制表生成主键。在MySQL 8.0.32及更高版本中，您可以通过设置REQUIRE_TABLE_PRIMARY_KEY_CHECK = generate作为CHANGE REPLICATION SOURCE to语句的一部分，可选地指定复制通道，从而使副本为这些表生成不可见的主键。有关更多信息和示例，请参见\xc2\xa013.1.20.11节，\xe2\x80\x9c生成的不可见主密钥\xe2\x80\x9d。”,sql_generate_invisible_primary_key,
show_gipk_in_create_table_and_information_schema,92. 生成的不可见主键在SHOW语句的输出和Information Schema表中是否可见。当该变量设置为OFF时，不会显示这些键。这个变量不会被复制。有关更多信息，请参见\xc2\xa013.1.20.11， \xe2\x80\x9c生成的不可见主密钥\xe2\x80\x9d。”,show_gipk_in_create_table_and_information_schema,
default_table_encryption,93. 定义在不指定encryption子句的情况下创建模式和一般表空间时应用于它们的默认加密设置。default_table_encryption变量仅适用于用户创建的模式和通用表空间。它不控制mysql系统表空间的加密。设置default_table_encryption的运行时值需要SYSTEM_VARIABLES_ADMIN和TABLE_ENCRYPTION_ADMIN权限，或者已弃用的SUPER权限。default_table_encryption支持SET PERSIST和SET PERSIST_ONLY语法。参见\xc2\xa05.1.9.3节，\xe2\x80\ x9cpersist系统变量\xe2\x80\x9d。更多信息请参见定义模式和通用表空间的加密默认值。”,default_table_encryption,
print_identified_with_as_hex,94. 在SHOW CREATE USER输出的IDENTIFIED WITH子句中显示的密码哈希值可能包含不可打印的字符，这些字符对终端显示和其他环境有不利影响。启用print_identified_with_as_hex会导致SHOW CREATE USER将这些哈希值显示为十六进制字符串而不是常规字符串字面值。即使启用了这个变量，不包含不可打印字符的哈希值仍然会显示为常规字符串字面值。”,print_identified_with_as_hex,
show_create_table_skip_secondary_engine,95. 启用show_create_table_skip_secondary_engine会导致SECONDARY ENGINE子句被排除在SHOW CREATE TABLE输出和mysqldump实用程序转储的CREATE TABLE语句中。Mysqldump提供了showcreateskipsecondaryengine选项。当指定时，它在转储操作期间启用show_create_table_skip_secondary_engine系统变量。在MySQL 8.0.18之前的版本中，如果不支持show_create_table_skip_secondary_engine变量，则使用showcreateskipsecondary_engine选项尝试mysqldump操作将导致错误。用于热浪。参见MySQL热浪用户指南。”,show_create_table_skip_secondary_engine,
generated_random_password_length,96. CREATE USER、ALTER USER和SET PASSWORD语句生成的随机密码中允许的最大字符数。有关更多信息，请参见生成随机密码。”,generated_random_password_length,
select_into_buffer_size,97. 当使用SELECT INTO OUTFILE或SELECT INTO DUMPFILE将数据转储到一个或多个文件中用于备份创建、数据迁移或其他目的时，通常可以缓冲写操作，然后触发对磁盘或其他存储设备的大量写I/O活动，并使其他对延迟更敏感的查询停滞。您可以使用这个变量来控制用于向存储设备写入数据的缓冲区的大小，以确定何时应该发生缓冲区同步，从而防止刚刚描述的那种写停顿的发生。Select_into_buffer_size会覆盖read_buffer_size设置的任何值。(select_into_buffer_size和read_buffer_size具有相同的默认值、最大值和最小值。)你也可以使用select_into_disk_sync_delay来设置一个在每次同步发生之后观察到的超时。从MySQL 8.0.27开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限制的会话变量。参见节\xc2\xa05.1.9.1， \xe2\x80\x9c系统变量权限\xe2\x80\x9d。”,select_into_buffer_size,
select_into_disk_sync,98. OFF ON当设置为ON时，通过使用select_into_buffer_size执行长时间运行的SELECT INTO OUTFILE或SELECT INTO DUMPFILE语句，启用写入输出文件的缓冲区同步。”,select_into_disk_sync,
select_into_disk_sync_delay,99. 当通过select_into_disk_sync启用长时间运行的SELECT INTO OUTFILE或SELECT INTO DUMPFILE语句写入输出文件的缓冲区同步时，该变量设置同步后的可选延迟(以毫秒为单位)。0(默认值)表示没有延迟。从MySQL 8.0.27开始，设置这个系统变量的会话值是一个受限制的操作。session用户必须有足够的权限来设置受限制的会话变量。参见节\xc2\xa05.1.9.1， \xe2\x80\x9c系统变量权限\xe2\x80\x9d。”,select_into_disk_sync_delay,
connection_memory_limit,100. 设置单个用户连接可以使用的最大内存量。如果任何用户连接使用的内存超过这个数量，那么来自该连接的所有查询都会被ER_CONN_LIMIT拒绝，包括当前正在运行的任何查询。这个变量设置的限制不适用于系统用户，也不适用于MySQL根帐户。InnoDB缓冲池使用的内存也不包括在内。您必须具有SYSTEM_VARIABLES_ADMIN或SUPER权限才能设置该变量。”,conn_mem_limit,
connection_memory_chunk_size,101. 设置全局内存使用计数器Global_connection_memory的更新分块大小。只有当所有用户连接的总内存消耗变化超过此量时，状态变量才会更新。通过设置connection_memory_chunk_size = 0来禁用更新。内存计算不包括系统用户(如MySQL root用户)使用的内存。InnoDB缓冲池使用的内存也不包括在内。您必须具有SYSTEM_VARIABLES_ADMIN或SUPER权限才能设置该变量。”,conn_mem_chunk_size,
global_connection_memory_tracking,102. 确定服务器是否计算Global_connection_memory。这个变量必须显式启用;否则，不进行内存计算，不设置Global_connection_memory。您必须具有SYSTEM_VARIABLES_ADMIN或SUPER权限才能设置该变量。”,conn_global_mem_tracking,
explain_format,103. TRADITIONAL(DEFAULT)JSON TREE该变量决定在显示查询执行计划时，在没有FORMAT选项时EXPLAIN使用的默认输出格式。TRADITIONAL:使用MySQL传统的基于表的输出，就像FORMAT=TRADITIONAL已经被指定为EXPLAIN语句的一部分一样。这是该变量的默认值。DEFAULT作为TRADITIONAL的同义词也被支持，并且具有完全相同的效果。DEFAULT不能用作EXPLAIN语句FORMAT选项的一部分。JSON:使用JSON输出格式，就像指定了FORMAT =JSON一样。TREE:使用基于树的输出格式，就像指定了FORMAT =TREE一样。这个变量的设置也会影响EXPLAIN ANALYZE。为此，DEFAULT和TRADITIONAL被解释为TREE。如果explain_format的值是JSON，并且发出一个没有FORMAT选项的EXPLAIN ANALYZE语句，则该语句会引发一个错误(ER_NOT_SUPPORTED_YET)。使用带有EXPLAIN或EXPLAIN ANALYZE的格式说明符将覆盖explain_format的任何设置。当使用该语句显示有关表列的信息时，explain_format系统变量对EXPLAIN输出没有影响。设置explain_format的会话值不需要特殊的权限;在全局级别设置它需要SYSTEM_VARIABLES_ADMIN(或已弃用的SUPER权限)。参见\xc2\xa05.1.9.1节，\xe2\x80\x9cSystem Variable Privileges\xe2\x80\x9d。更多信息和示例，请参见获取执行计划信息。”,explain_format,
